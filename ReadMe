**Task 1: CV Parser

Your resume/CV in JSON format and a parser for the resume so it can be displayed.

We’d like you to submit your resume in JSON format, and have an app consume the JSON data and display it. It can be done on web, mobile, or any platform or language that you’re most familiar with. You can display it any way you think would be impressive: good typography, visualizations, etc.

Don’t worry if your design is not as good as you’d like; we’re mostly interested in how you parse the JSON you made and the pretty rendering is just a bonus.



**Task 2: Tic-tac-toe

Write a tic-tac-toe app that never loses on a 3x3 board.

The app will have a computer player and a human player. The computer player should always play the best move and never lose.
Super bonus points for being able to play on a 4x4 board and a 5x5 board (we will have a very interesting and fruitful interview if you do this). As before, you can do it on web, mobile, or any platform or language that you’re most familiar with.



**Task 3: URL shortner

If you’re applying for a middle or senior developer position (or you just want to do this challenge anyway): Write a URL shortener app.

The app needs to be on the web and needs to use a database (any kind: relational, non-relational, file-based, etc). Please don’t use online services like bitly or tinyurl; that’s not the point of this exercise. When crafting your solution, take note of the following:
if the app becomes famous and you have 10,000 people trying to shorten urls every minute, what would the bottlenecks be?

how would you work around these bottlenecks?
how does the performance characteristics change when you have 500 million new links per month?
Your URL shortener app needs to be able to address these challenges.


Stack Used:

- Django backend with Python-2.7
- Postgres database
- CentOS 7 server
- Ansible for deployment
- Angular-SPA for frontend
- REST backend
- uWSGI for application server
- nGinx for reverse proxy and static files serving
- Git-flow used for version control

